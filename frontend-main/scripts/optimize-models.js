#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ GLTF/GLB –º–æ–¥–µ–ª–µ–π
 * –¢—Ä–µ–±—É–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–∫–∏: npm install -g gltf-pipeline
 */

const fs = require('fs');
const path = require('path');
const { execSync } = require('child_process');

const modelsDir = path.join(__dirname, '../public/models');
const outputDir = path.join(__dirname, '../public/models-optimized');

// –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π
if (!fs.existsSync(outputDir)) {
  fs.mkdirSync(outputDir, { recursive: true });
}

function optimizeModel(inputPath, outputPath) {
  try {
    // –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —Å –ø–æ–º–æ—â—å—é gltf-pipeline
    const command = `gltf-pipeline -i "${inputPath}" -o "${outputPath}" -d`;
    
    console.log(`–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è: ${path.basename(inputPath)}`);
    execSync(command, { stdio: 'inherit' });
    
    // –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–æ–≤
    const originalSize = fs.statSync(inputPath).size;
    const optimizedSize = fs.statSync(outputPath).size;
    const reduction = ((originalSize - optimizedSize) / originalSize * 100).toFixed(2);
    
    console.log(`‚úì –°–∂–∞—Ç–∏–µ: ${reduction}% (${(originalSize / 1024 / 1024).toFixed(2)}MB ‚Üí ${(optimizedSize / 1024 / 1024).toFixed(2)}MB)\n`);
    
    return { originalSize, optimizedSize };
  } catch (error) {
    console.error(`‚úó –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ ${inputPath}:`, error.message);
    return null;
  }
}

function processDirectory(dir, outputBase) {
  const items = fs.readdirSync(dir);
  let totalOriginal = 0;
  let totalOptimized = 0;
  
  items.forEach(item => {
    const fullPath = path.join(dir, item);
    const stat = fs.statSync(fullPath);
    
    if (stat.isDirectory()) {
      // –°–æ–∑–¥–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ output
      const outputSubDir = path.join(outputBase, item);
      if (!fs.existsSync(outputSubDir)) {
        fs.mkdirSync(outputSubDir, { recursive: true });
      }
      
      // –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ–¥–¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
      const subResult = processDirectory(fullPath, outputSubDir);
      totalOriginal += subResult.totalOriginal;
      totalOptimized += subResult.totalOptimized;
    } else if (item.endsWith('.gltf') || item.endsWith('.glb')) {
      const outputPath = path.join(outputBase, item);
      const result = optimizeModel(fullPath, outputPath);
      
      if (result) {
        totalOriginal += result.originalSize;
        totalOptimized += result.optimizedSize;
      }
    } else {
      // –ö–æ–ø–∏—Ä—É–µ–º –¥—Ä—É–≥–∏–µ —Ñ–∞–π–ª—ã (—Ç–µ–∫—Å—Ç—É—Ä—ã, bin —Ñ–∞–π–ª—ã)
      const outputPath = path.join(outputBase, item);
      fs.copyFileSync(fullPath, outputPath);
    }
  });
  
  return { totalOriginal, totalOptimized };
}

console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é 3D –º–æ–¥–µ–ª–µ–π...\n');

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è gltf-pipeline
try {
  execSync('gltf-pipeline --version', { stdio: 'ignore' });
} catch (error) {
  console.error('‚ùå gltf-pipeline –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!');
  console.log('–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –µ–≥–æ –∫–æ–º–∞–Ω–¥–æ–π: npm install -g gltf-pipeline');
  process.exit(1);
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö –º–æ–¥–µ–ª–µ–π
const result = processDirectory(modelsDir, outputDir);

// –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
console.log('\nüìä –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:');
console.log(`–ò—Å—Ö–æ–¥–Ω—ã–π —Ä–∞–∑–º–µ—Ä: ${(result.totalOriginal / 1024 / 1024).toFixed(2)}MB`);
console.log(`–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–∞–∑–º–µ—Ä: ${(result.totalOptimized / 1024 / 1024).toFixed(2)}MB`);
console.log(`–û–±—â–µ–µ —Å–∂–∞—Ç–∏–µ: ${((result.totalOriginal - result.totalOptimized) / result.totalOriginal * 100).toFixed(2)}%`);
console.log(`\n‚úÖ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–æ–¥–µ–ª–∏ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤: ${outputDir}`);
console.log('\n‚ö†Ô∏è  –ù–µ –∑–∞–±—É–¥—å—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å –ø—É—Ç–∏ –∫ –º–æ–¥–µ–ª—è–º –≤ –∫–æ–¥–µ –Ω–∞ /models-optimized/ –≤–º–µ—Å—Ç–æ /models/');
